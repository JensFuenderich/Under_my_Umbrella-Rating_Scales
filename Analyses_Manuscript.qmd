---
title: "Analyses_Manuscript"
author: "Jens H. FÃ¼nderich"
format: html
editor: visual
---

# Set Up

Select "Run All" and the whole script should be executed, installing and loading packages, running analyses, and creating and exporting plots and tables. Outputs are stored in the Output\_ folders.

## Install & Load packages

```{r}

## Library Loading
packages <- c("dplyr", 
              "flextable", 
              "ggplot2",
              "gtools",
              "metafor",
              "MKpower",
              "readr",
              "tibble", 
              "officer", 
              "osfr")

## check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
  
  pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
  
  if(pkg_avail){
    require(x, character.only = TRUE)             # load the library, if already installed
    
  }else{
    install.packages(x)                           # install the library, if missing
    require(x, character.only = TRUE)             # load after installation
  }
})

## keep the environment tidy 
rm(packages)

```

## 

## Source Custom Functions

```{r}

## source the function for Fig. 2-3 and 5-7
source("Custom_Functions/umbrella_fun.R")

## remove 0 before decimal point (for p-values)
remove_zero <- function(x){
  sub("^(-?)0.", "\\1.", sprintf("%.3f", x)) 
  }

```

## Download Multi-Lab Data

```{r}

## download data as rds object from DRIPHT Repository (https://osf.io/g2fzq) 
csv_download <- osfr::osf_retrieve_file("6pw3s") %>% 
  osfr::osf_download(., 
                     path = file.path("Input_Data"), 
                     conflicts = "overwrite")

## import the csv file 
DRIPHT_df <- readr::read_csv(file = csv_download$local_path)

## download additional data as rds object from DRIPHT Repository (https://osf.io/g2fzq) 
csv_download <- osfr::osf_retrieve_file("bx8y5") %>% 
  osfr::osf_download(., 
                     path = file.path("Input_Data"), 
                     conflicts = "overwrite")

## import the csv file 
MetaPipeX_Output_df <- readr::read_csv(file = csv_download$local_path)

## keep the environment tidy 
rm(csv_download)

```

# Fig. 1-5

## Fig. 1

```{r}

## generate are possible response patterns (IPD) for: 
## n = 12 
## scale: 0 - 6 
IPD_combinations <- gtools::combinations(
  n = 7, # number of integers of the scale
  r = 12, # n
  v = 0:6, # the units of the scale
  repeats.allowed = TRUE)

## create list with mean and sd results per possibel sample result (row)
Fig_01_data <- lapply(
  1:nrow(IPD_combinations), 
  function(row){
    subset_possible_combinations <- IPD_combinations[row,]
    data.frame(
      mean = mean(subset_possible_combinations), 
      sd = sqrt(
        mean((subset_possible_combinations - mean(subset_possible_combinations))^2) 
        )
      )
    })

## store as df
Fig_01_data <- do.call(rbind, Fig_01_data)

## create Fig. 1
Fig_01 <- ggplot(data = Fig_01_data, 
       aes(x = mean, y = sd)) + 
  geom_point(color = "#CCBBAA") + 
  scale_x_continuous(breaks = seq(from = 0, to = 6, by = 1)) +
  ylab(label = "standard deviation") + 
  theme_minimal() + 
  geom_point(x = 0.5, 
             y = 0.5, 
             color = "#0072B2") + 
  geom_point(x = 0.5,
             y = 1.658,
             color = "#0072B2")

## save Fig. 1
ggsave(file = "Output_Graphics/Fig_01.png", 
       Fig_01, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_01
```

## 

## Table 1

The table in the manuscript is created manually. This is in here for completeness, and to check our numeric examples related to this table.

```{r}

## n = 12
## scale = 0:6

## create IPD
Table_1_data <- data.frame(
  i = 1:12, 
  sigma_min = c(rep(0, times = 6), rep(1, times = 6)), 
  sigma_max = c(rep(0, times = 11), 6)
)

## sample SD for min & max 
round( 
  sqrt(mean((Table_1_data$sigma_min - mean(Table_1_data$sigma_min))^2)), 
  digits = 3
  )
round(
  sqrt(mean((Table_1_data$sigma_max - mean(Table_1_data$sigma_max))^2)), 
  digits = 3
  )

## Bernoulli formalizationn 

## expected value p 
p <- 0.5

## thresholds k 
k <- 6 - 0

## SD min 
round(sqrt(p * (1 - p)), digits = 3)

## SD max
p <- 0.5/k
round(p, digits = 3)
round(sqrt(k^2 * p * (1 - p)), digits = 3)

## keep the environment tidy 
rm(Table_1_data, p, k)

```

## Fig. 2

```{r}

## create Fig. 2
Fig_02 <- umbrella_fun(scale_min = 0, scale_max = 6)

## save Fig. 2
ggsave(file = "Output_Graphics/Fig_02.png", 
       Fig_02, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_02
```

## 

## Fig. 3

```{r}

### set parameters for the "replications" within the umbrella 

## set parameters for the scale
scale_min <-  0
scale_max <- 6
step_size <- 1

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD <- 0.5

## set control group means of the four MD
CM <- c(
  mean(rep(3, times = 12)), # mean = 3
  mean(rep(c(0,6), times = c(6, 6))), # mean = 3
  mean(rep(c(5,6), times = c(6, 6))), # mean = 5.5
  mean(rep(c(0,6), times = c(1,11)))  # mean = 5.5
)

## calculate treatment group means of the four MD
TM <- c(
  mean(rep(c(3,4), times = c(6, 6))), # mean = 3.5
  mean(rep(c(0,6), times = c(5, 7))), # mean = 3.5
  mean(rep(6, times = 12)), # mean = 6
  mean(rep(6, times = 12)) # mean = 6
)

## set control group standard deviations of the four MD
C_SD <- c(
  sd(rep(3, times = 12)), # mean = 3
  sd(rep(c(0,6), times = c(6, 6))), # mean = 3
  sd(rep(c(3,4), times = c(5, 7))), # mean = 5.5
  sd(rep(c(0,6), times = c(1,11)))  # mean = 5.5
)

## set treatment group standard deviations of the four MD
T_SD <- c(
  sd(rep(c(3,4), times = c(6, 6))), # mean = 3.5
  sd(rep(c(0,6), times = c(5, 7))), # mean = 3.5
  sd(rep(6, times = 12)), # mean = 6
  sd(rep(6, times = 12)) # mean = 6
)

## use the sample SD (n in the denominator), not estimates for the population SD
C_SD <- sqrt(C_SD^2 * (C_N - 1) / C_N )
T_SD <- sqrt(T_SD^2 * (T_N - 1) / T_N )

## store data in df 
Fig_03_data <- data.frame(
    ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
    means = c(CM, TM) - scale_min, 
    SD = c(C_SD, T_SD), 
    group_color = as.factor(rep(c(0.2, 0.8), times = c(length(C_SD), length(T_SD))))
  )

### create the umbrella plot
## umbrella 
Fig_03 <- umbrella_fun(scale_min = 0, scale_max = 6)
## everything else on top 
Fig_03 <- Fig_03 + 
  ## segments
  # geom_segment(x = 3, y = 0, yend = 3, linetype = 2, color = "#00BB99") +
  # geom_segment(x = 3.5, y = 0.5, yend = Fig_03_data$SD[6], linetype = 2, color = "#00BB99") +
  # geom_segment(x = 5.5, y = 0.5, yend = Fig_03_data$SD[4], linetype = 2, color = "#00BB99") +
  geom_segment(x = 3, y = 0, yend = 3, linetype = 2, color = "#009E73") +
  geom_segment(x = 3.5, y = 0.5, yend = Fig_03_data$SD[6], linetype = 2, color = "#009E73") +
  geom_segment(x = 5.5, y = 0.5, yend = Fig_03_data$SD[4], linetype = 2, color = "#009E73") +
  ## "replications"
  geom_line(data = subset(Fig_03_data, Fig_03_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#0072B2",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_03_data, Fig_03_data$ID == 1), 
             aes(x = means, 
                 y = SD),
             color = "#0072B2", # "#0060DD",
             size = 2) +
  geom_line(data = subset(Fig_03_data, Fig_03_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#DF536B", # "#CC79A7", # "#DD0000", "#CC79A7" "#D55E00"
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_03_data, Fig_03_data$ID == 2), 
             aes(x = means, 
                 y = SD),
             color = "#DF536B", # "#DD0000",
             size = 2) +
  geom_line(data = subset(Fig_03_data, Fig_03_data$ID == 3), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#0072B2",
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_03_data, Fig_03_data$ID == 3), 
             aes(x = means, 
                 y = SD),
             color = "#0072B2",
             size = 2) +
  geom_line(data = subset(Fig_03_data, Fig_03_data$ID == 4), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#E69F00", # "#ff8800", 
            size = 1,
            alpha = 1) + 
  geom_point(data = subset(Fig_03_data, Fig_03_data$ID == 4), 
             aes(x = means, 
                 y = SD),
             color = "#E69F00",
             size = 2) 

## save Fig. 3
ggsave(file = "Output_Graphics/Fig_03.png", 
       Fig_03, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_03

## keep the environment tidy 
rm(Fig_03_data,
   C_N, C_SD, CM, MD, 
   scale_max, scale_max_0, scale_min, step_size, 
   T_N, T_SD, TM)

```

## 

## Fig. 4

```{r}

### calculate power with the following specifications
## 7-point rating scale 
## MD: 0.5 
## n (per group): range from 12-360 (total n from 24-760)
## alpha = 0.05 (two-sided)
## CM_1 = 3, TM_1 = 3.5, CM_2 = 5.5, TM_2 = 6, CM_3 = 3, TM_3 = 3.5
## SD_1 = SD max, SD_2 = SD max, SD_3 = SD min 
## the fourth line is the minimum SD at CM_4 = 5.5, TM_4 = 6 (SD_4)
## we do not calculate these, because SD_3 = SD_4 

## set a vector with a range of n (per group) 
n_group_vec <- seq(from = 12, to = 360, by = 12)

## calculate power per n
Fig_04_data <- lapply(
  n_group_vec, 
  function(n_group){
    
    ### create the data for the umbrella 
    
    ## calculate scale max if the scale starts at 0
    scale_max_0 <- 6 - 0
    
    ## create means of the scale from 0 to scale_max_0
    rating_scale_means <- c(3, 3.5, 5.5, 6) - 0

    ## calculate Bernoulli means for upper limit 
    ## we assume all values are 
    ## x = {0;scale_max_0}
    p_upper <- rating_scale_means/scale_max_0

    ## calculate Var according to Bernoulli distribution, rescale and take the sqrt
    SD_upper_limit <- sqrt(scale_max_0^2 * p_upper * (1-p_upper))

    ## calculate Bernoulli means for lower limit 
    ## we assume all values are 
    ## x = { ceiling(rating_scale_means); floor(rating_scale_means) } 
    p_lower <- rating_scale_means - floor(rating_scale_means)
    ## calculate Bernoulli Var, rescale it and take the sqrt
    SD_lower_limit <- sqrt((p_lower * (1-p_lower)))
    
    ## select the appropriate SD (MD = 0.5)
    SD_1_control <- SD_upper_limit[1]
    SD_2_control <- SD_upper_limit[3]
    SD_3_control <- SD_lower_limit[1]
    SD_1_treatment <- SD_upper_limit[2]
    SD_2_treatment <- SD_upper_limit[4]
    SD_3_treatment <- SD_lower_limit[2]

    ## change SD to have denominator (n-1) (same as sd() function)
    SD_1_control <- sqrt(SD_1_control^2 * n_group / (n_group - 1))
    SD_2_control <- sqrt(SD_2_control^2 * n_group / (n_group - 1))
    SD_3_control <- sqrt(SD_3_control^2 * n_group / (n_group - 1))
    SD_1_treatment <- sqrt(SD_1_treatment^2 * n_group / (n_group - 1))
    SD_2_treatment <- sqrt(SD_2_treatment^2 * n_group / (n_group - 1))
    SD_3_treatment <- sqrt(SD_3_treatment^2 * n_group / (n_group - 1))
    
    ## calculate power 
    Welch_results_1 <- MKpower::power.welch.t.test(n = n_group, 
                                           delta = 0.5, 
                                           sd1 = SD_1_control, 
                                           sd2 = SD_1_treatment, 
                                           sig.level = 0.05,
                                           alternative = "two.sided")
    
    Welch_results_2 <- MKpower::power.welch.t.test(n = n_group, 
                                             delta = 0.5, 
                                             sd1 = SD_2_control,
                                             sd2 = SD_2_treatment,
                                             sig.level = 0.05,
                                             alternative = "two.sided")
    
    Welch_results_3 <- MKpower::power.welch.t.test(n = n_group, 
                                                   delta = 0.5, 
                                                   sd1 = SD_3_control,
                                                   sd2 = SD_3_treatment,
                                                   sig.level = 0.05,
                                                   alternative = "two.sided")
    
    ## export results as df 
    data.frame(n = n_group*2, 
               power_1_Welch = Welch_results_1$power, 
               power_2_Welch = Welch_results_2$power,
               power_3_Welch = Welch_results_3$power
    )
    
  }
)

## store data in a single df
Fig_04_data <- do.call(rbind, Fig_04_data)

## create Fig. 4
Fig_04 <- ggplot(data = Fig_04_data) + 
  geom_ribbon(aes(x = n, ymin = power_2_Welch, ymax = power_3_Welch), 
              fill= "#009E73",
              alpha=0.15) +
  geom_ribbon(aes(x = n, ymin = power_1_Welch, ymax = power_3_Welch), 
              fill="#009E73", 
              alpha=0.1) +
  geom_point(aes(x = n, y = power_3_Welch), 
             color = "#0072B2") + 
  geom_point(aes(x = n, y = power_2_Welch), 
             color = "#E69F00") +
  geom_point(aes(x = n, y = power_1_Welch), 
             color = "#DF536B") +
  ## theme, etc.
  ylab(label = "Power") + 
  theme_minimal() 

## save Fig. 4
ggsave(file = "Output_Graphics/Fig_04.png", 
       Fig_04, 
       width = 16, 
       height = 9, 
       units = "cm", 
       bg='#ffffff') 

Fig_04

## keep the environment tidy 
rm(n_group_vec)

```

## 

## Fig. 5a & 5b

```{r}

### set parameters for the "replications" within the umbrella 

## set parameters for the scale
scale_min <-  0
scale_max <- 6
step_size <- 1
k <- scale_max - scale_min

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD_1 <- 0.5 # red line 
MD_2 <- 1 # grey line 
MD_3 <- 2 # black line 

## set control group means of the three MD
CM <- c(3, 2.5, 2)

## set treatment group means of the three MD
TM <- c(3.5, 3.5, 4)

## set control group standard deviations of the three MD
C_SD <- c(
  sqrt(k^2 * (3/k) * (1 - (3/k))), 
  sqrt(k^2 * (2.5/k) * (1 - (2.5/k))), 
  sqrt(k^2 * (2/k) * (1 - (2/k)))
  )

## set treatment group standard deviations of the three MD
T_SD <- c(
  sqrt(k^2 * (3.5/k) * (1 - (3.5/k))), 
  sqrt(k^2 * (3.5/k) * (1 - (3.5/k))), 
  sqrt(k^2 * (4/k) * (1 - (4/k)))
  )

## store data in df 
Fig_05a_data <- data.frame(
  ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
  means = c(CM, TM) - scale_min, 
  SD = c(C_SD, T_SD) 
)

### create the umbrella plot
## umbrella 
Fig_05a <- umbrella_fun(scale_min = 0, scale_max = 6)
## everything else on top 
Fig_05a <- Fig_05a + 
  geom_line(data = subset(Fig_05a_data, Fig_05a_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#DF536B",
            size = 1) + 
  geom_point(data = subset(Fig_05a_data, Fig_05a_data$ID == 1),
             aes(x = means,
                 y = SD),
             color = "#DF536B",
             size = 2) +
  geom_line(data = subset(Fig_05a_data, Fig_05a_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "gray62", 
            # linetype = 2,
            size = 0.5) + 
  geom_point(data = subset(Fig_05a_data, Fig_05a_data$ID == 2),
             aes(x = means,
                 y = SD),
             color = "gray62",  # "#AAAAAA", 
             size = 2) +
  geom_line(data = subset(Fig_05a_data, Fig_05a_data$ID == 3),
            aes(x = means,
                y = SD,
                group = ID),
            color = "black", # "#CD0BBC", # "#000000",
            size = 0.5) +
  geom_point(data = subset(Fig_05a_data, Fig_05a_data$ID == 3),
             aes(x = means,
                 y = SD),
             color = "black", # "#CD0BBC",
             size = 2) +
  ## theme, etc. 
  ggtitle(label = "a")


### power calculations and plot 

## set a vector with a range of n (per group) 
n_group_vec <- seq(from = 12, to = 360, by = 12)

## calculate power per n
Fig_05b_data <- lapply(
  n_group_vec, 
  function(n_group){
    
    ### create the data for the umbrella 
    
    ## calculate scale max if the scale starts at 0
    scale_max_0 <- 6 - 0
    
    ## create means of the scale from 0 to scale_max_0
    rating_scale_means <- c(3, 3.5, 2.5, 3.5, 2, 4) - 0
    
    ## calculate Bernoulli means for upper limit 
    ## we assume all values are 
    ## x = {0;scale_max_0}
    p_upper <- rating_scale_means/scale_max_0
    
    ## calculate Var according to Bernoulli distribution, rescale and take the sqrt
    SD_upper_limit <- sqrt(scale_max_0^2 * p_upper * (1-p_upper))
    
    ## calculate Bernoulli means for lower limit 
    ## we assume all values are 
    ## x = { ceiling(rating_scale_means); floor(rating_scale_means) } 
    p_lower <- rating_scale_means - floor(rating_scale_means)
    ## calculate Bernoulli Var, rescale it and take the sqrt
    SD_lower_limit <- sqrt((p_lower * (1-p_lower)))
    
    ## select the appropriate SD 
    SD_1_control <- SD_upper_limit[1]
    SD_2_control <- SD_upper_limit[3]
    SD_3_control <- SD_upper_limit[5]
    SD_1_treatment <- SD_upper_limit[2]
    SD_2_treatment <- SD_upper_limit[4]
    SD_3_treatment <- SD_upper_limit[6]
    
    ## change SD to have denominator (n-1) (same as sd() function)
    SD_1_control <- sqrt(SD_1_control^2 * n_group / (n_group - 1))
    SD_2_control <- sqrt(SD_2_control^2 * n_group / (n_group - 1))
    SD_3_control <- sqrt(SD_3_control^2 * n_group / (n_group - 1))
    SD_1_treatment <- sqrt(SD_1_treatment^2 * n_group / (n_group - 1))
    SD_2_treatment <- sqrt(SD_2_treatment^2 * n_group / (n_group - 1))
    SD_3_treatment <- sqrt(SD_3_treatment^2 * n_group / (n_group - 1))
    
    ## calculate power 
    Welch_results_1 <- MKpower::power.welch.t.test(
      n = n_group, 
      delta = rating_scale_means[2] - rating_scale_means[1], 
      sd1 = SD_1_control, 
      sd2 = SD_1_treatment, 
      sig.level = 0.05,
      alternative = "two.sided")
    
    Welch_results_2 <- MKpower::power.welch.t.test(
      n = n_group, 
      delta = rating_scale_means[4] - rating_scale_means[3], 
      sd1 = SD_2_control,
      sd2 = SD_2_treatment,
      sig.level = 0.05,
      alternative = "two.sided")
    
    Welch_results_3 <- MKpower::power.welch.t.test(
      n = n_group,
      delta = rating_scale_means[6] - rating_scale_means[5],
      sd1 = SD_3_control,
      sd2 = SD_3_treatment,
      sig.level = 0.05,
      alternative = "two.sided")
    
    ## export results as df 
    data.frame(n = n_group*2, 
               power_1_Welch = Welch_results_1$power, 
               power_2_Welch = Welch_results_2$power,
               power_3_Welch = Welch_results_3$power
    )
    
  }
)

## store data in a single df
Fig_05b_data <- do.call(rbind, Fig_05b_data)

## create Fig. 5 b)
Fig_05b <- ggplot(data = Fig_05b_data) + 
  geom_point(aes(x = n, y = power_3_Welch),
             color = "black") +
  geom_point(aes(x = n, y = power_2_Welch),
             color = "grey62") +
  geom_point(aes(x = n, y = power_1_Welch), 
             color = "#DF536B") +
  ## theme, etc.
  ylab(label = "Power") + 
  theme_minimal() +
  ggtitle(label = "b")


## create Fig. 5
Fig_05 <- gridExtra::grid.arrange(
  grobs = list(Fig_05a, Fig_05b), 
  ncol = 2)

## save Fig. 5
ggsave(file = "Output_Graphics/Fig_05.png", 
       Fig_05, 
       width = 16, 
       height = 6, 
       units = "cm", 
       bg='#ffffff') 

Fig_05

## keep the environment tidy
rm(Fig_05a, Fig_05b, Fig_05a_data, Fig_05b_data,
   C_N, C_SD, CM, MD_1, MD_2, MD_3,
   scale_max, scale_max_0, scale_min, step_size, 
   T_N, T_SD, TM, 
   k, n_group_vec)


```

## Fig. 6a & 6b

```{r}

### Fig. 6a 

## set parameters for the scale
scale_min <-  0
scale_max <- 6
step_size <- 1

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD_1 <- 2 # A
MD_2 <- 2 # B

## set control group means of the three MD
CM <- c(1.5, 4)

## set treatment group means of the three MD
TM <- c(3.5, 6)

## set control group standard deviations of the three MD
C_SD <- c(1.5, 1.5)

## set treatment group standard deviations of the three MD
T_SD <- c(1.5, 0)

## store data in df 
Fig_06a_data <- data.frame(
  ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
  means = c(CM, TM) - scale_min, 
  SD = c(C_SD, T_SD) 
)

## umbrella 
Fig_06a <- umbrella_fun(scale_min = 0, scale_max = 6)
## everything else on top 
Fig_06a <- Fig_06a + 
  geom_line(data = subset(Fig_06a_data, Fig_06a_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "black", 
            size = 0.5,
            alpha = 1) + 
  geom_point(data = subset(Fig_06a_data, Fig_06a_data$ID == 1), 
             aes(x = means, 
                 y = SD), 
             color = "black", 
             size = 2) +
  geom_line(data = subset(Fig_06a_data, Fig_06a_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "black", 
            size = 0.5,
            alpha = 1) + 
  geom_point(data = subset(Fig_06a_data, Fig_06a_data$ID == 2), 
             aes(x = means, 
                 y = SD),
             color = "black", 
             size = 2) +
  ## labels
  annotate(geom = "text", x = 2.5, y = 1.8, label = "A", color ="black") + 
  annotate(geom = "text", x = 5, y = 1.2, label = "B", color = "black") + 
  ## theme, etc. 
  ggtitle(label = "a")



### Fig. 6b 

## set parameters for the scale
scale_min <-  0
scale_max <- 6
step_size <- 1

## calculate scale max if the scale starts at 0
scale_max_0 <- scale_max - scale_min

## set the sample sizes
C_N <- 12
T_N <- 12

## set the MD
MD_1 <- 1 # A
MD_2 <- 2 # B 
MD_3 <- 2 # C

## set control group means of the three MD
CM <- c(3.25, 3.25, 3.25)

## set treatment group means of the three MD
TM <- c(4.25, 5.25, 5.25)

## set control group standard deviations of the three MD
C_SD <- c(1.5, 1.5, 1.5)

## set treatment group standard deviations of the three MD
T_SD <- c(1.5, 1.5, 1)

## store data in df 
Fig_06b_data <- data.frame(
  ID = c(seq(from = 1, to = length(CM), by = 1), seq(from = 1, to = length(TM), by = 1)),
  means = c(CM, TM) - scale_min, 
  SD = c(C_SD, T_SD) 
)

### create the umbrella plot
## umbrella 
Fig_06b <- umbrella_fun(scale_min = 0, scale_max = 6)
## everything else on top 
Fig_06b <- Fig_06b + 
  geom_line(data = subset(Fig_06b_data, Fig_06b_data$ID == 1), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "#2297E6", # "#00DDFF", "#2297E6"
            size = 1) + 
  geom_point(data = subset(Fig_06b_data, Fig_06b_data$ID == 1),
             aes(x = means,
                 y = SD),
             color = "#2297E6", # "#00AAFF",
             size = 2) +
  geom_line(data = subset(Fig_06b_data, Fig_06b_data$ID == 2), 
            aes(x = means, 
                y = SD, 
                group = ID),
            color = "black", 
            linetype = 2,
            size = 0.5) + 
  geom_point(data = subset(Fig_06b_data, Fig_06b_data$ID == 2),
             aes(x = means,
                 y = SD),
             color = "black",
             size = 2) +
  geom_line(data = subset(Fig_06b_data, Fig_06b_data$ID == 3),
            aes(x = means,
                y = SD,
                group = ID),
            color = "black",
            size = 0.5) +
  geom_point(data = subset(Fig_06b_data, Fig_06b_data$ID == 3),
             aes(x = means,
                 y = SD),
             color = "black",
             size = 2) +
  ## labels
  annotate(geom = "text", x = 3.75, y = 1.8, label = "A", color ="#2297E6") +
  annotate(geom = "text", x = 4.75, y = 1.8, label = "B", color = "black") + 
  annotate(geom = "text", x = 4.25, y = 1, label = "C", color = "black") + 
  ## theme, etc. 
  ggtitle(label = "b")

## create Fig. 6
Fig_06 <- gridExtra::grid.arrange(
  grobs = list(Fig_06a, Fig_06b), 
  ncol = 2)

## save Fig. 6
ggsave(file = "Output_Graphics/Fig_06.png", 
       Fig_06, 
       width = 16, 
       height = 6, 
       units = "cm", 
       bg='#ffffff') 

Fig_06

## keep the environment tidy
rm(Fig_06a, Fig_06b, Fig_06a_data, Fig_06b_data,
   C_N, C_SD, CM, MD_1, MD_2, MD_3,
   scale_max, scale_max_0, scale_min, step_size, 
   T_N, T_SD, TM)

```

# Prepare Multi-Lab Data

## Select Data-Sets

```{r}

## potentially interesting effects as described in the manuscript 
MetaPipeX_Output_df %>% 
  # select only direct replication projects
  dplyr::filter(MultiLab %in% c("ML1", "ML2", "ML3", "RRR_03", "RRR_04", "RRR_05", "RRR_06", "RRR_07", "RRR_08", "RRR_09", "RRR_10")) %>% 
  # select only rating scale data
  dplyr::filter(MASC %in% c("Oppenheimer_Meyvis", "Lorge", "Bauer", "Inbar", "Risen", "Risen_CR", "Hsee", "Gray", "Zaval", "Zaval_CR", "Knobe", "Galinsky", "Jostmann", "Monin", "Ross3")) %>% 
  # select effects that are at least "small" by convention
  dplyr::filter(abs(Est__SMD) > 0.2) 

## names of the subset for the manuscript
subset_names <- c("Lorge", "Hsee", "Oppenheimer_Meyvis", "Knobe")

## create subset 
analysis_subset <- DRIPHT_df %>% dplyr::filter(MASC %in% subset_names)

```

## Apply Meta-Analyses

```{r}

## we run the meta-analyses using metafor 
MA_results <- lapply(
  subset_names, 
  function(name){
    list(
      MD = metafor::rma(yi = MD, 
                        sei = SE_MD, 
                        data = analysis_subset %>% dplyr::filter(MASC == name), 
                        method = "REML"), 
      d = metafor::rma(yi = SMD, 
                       sei = SE_SMD, 
                       data = analysis_subset %>% dplyr::filter(MASC == name), 
                       method = "REML")
    )
    
  }
)

## add names to list objects
names(MA_results) <- subset_names

## export results 
readr::write_rds(MA_results, 
                 file = "Output_Data/MA_results.rds")

```

## Fig. 7a - 7d

```{r}

## select data for Fig. 7a
Fig_07a_data <- analysis_subset %>% 
  dplyr::filter(MASC == "Lorge")

## create Fig. 7a
Fig_07a <- umbrella_fun(
  scale_min = 1, scale_max = 9, 
  CM = Fig_07a_data$C_M, TM = Fig_07a_data$T_M, ## means  
  C_SD = Fig_07a_data$C_SD, T_SD = Fig_07a_data$T_SD, ## standard deviations 
  C_N = Fig_07a_data$C_N, T_N = Fig_07a_data$T_N, ## N 
  ) + 
  theme(axis.title.x = element_blank()) + 
  ggtitle(label = "a: Data Set (1)")  


## select data for Fig. 7b
Fig_07b_data <- analysis_subset %>% 
  dplyr::filter(MASC == "Hsee")

## create Fig. 7b
Fig_07b <- umbrella_fun(
  scale_min = 0, scale_max = 6, 
  CM = Fig_07b_data$C_M, TM = Fig_07b_data$T_M, ## means  
  C_SD = Fig_07b_data$C_SD, T_SD = Fig_07b_data$T_SD, ## standard deviations 
  C_N = Fig_07b_data$C_N, T_N = Fig_07b_data$T_N, ## N 
  ) + 
  theme(axis.title = element_blank()) + 
  ggtitle(label = "b: Data Set (2)")


## select data for Fig. 7c
Fig_07c_data <- analysis_subset %>% 
  dplyr::filter(MASC == "Oppenheimer_Meyvis")

## create Fig. 7c
Fig_07c <- umbrella_fun(
  scale_min = 1, scale_max = 9, 
  CM = Fig_07c_data$C_M, TM = Fig_07c_data$T_M, ## means  
  C_SD = Fig_07c_data$C_SD, T_SD = Fig_07c_data$T_SD, ## standard deviations 
  C_N = Fig_07c_data$C_N, T_N = Fig_07c_data$T_N, ## N 
  ) + 
  # theme(axis.title = element_blank()) + 
  ggtitle(label = "c: Data Set (3)")  


## select data for Fig. 7d
Fig_07d_data <- analysis_subset %>% 
  dplyr::filter(MASC == "Knobe")

## create Fig. 7d
Fig_07d <- umbrella_fun(
  scale_min = 1, scale_max = 7, 
  CM = Fig_07d_data$C_M, TM = Fig_07d_data$T_M, ## means  
  C_SD = Fig_07d_data$C_SD, T_SD = Fig_07d_data$T_SD, ## standard deviations
  C_N = Fig_07d_data$C_N, T_N = Fig_07d_data$T_N, ## N 
  ) + 
  theme(axis.title.y = element_blank()) + 
  ggtitle(label = "d: Data Set (4)")  


## create Fig. 7
Fig_07 <- gridExtra::grid.arrange(
  grobs = list(Fig_07a, Fig_07b, 
               Fig_07c, Fig_07d), 
  ncol = 2
  )

## save Fig. 7
ggsave(file = "Output_Graphics/Fig_07.png", 
       Fig_07, 
       width = 16, 
       height = 11, 
       units = "cm", 
       bg='#ffffff') 

Fig_07

```

## 

## Table 2

```{r}

## create Table 2 
Table_2 <- lapply(
  subset_names, # each data set is a row 
  function(subset_name){
    # data for the row
    data <- analysis_subset %>% dplyr::filter(MASC == subset_name)
    
    ## calculate pearson correlation between MD and pooled SD 
    r_pearson <- confintr::ci_cor(
      x = data$MD, 
      y = data$pooled_SD, 
      method = "pearson", 
      probs = c(0.025, 0.975)
      )
  
    ## calculate spearman correlation (ranks) between MD and pooled SD 
    r_spearman <- confintr::ci_cor(
    x = data$MD, 
    y = data$pooled_SD, 
    method = "spearman", 
    probs = c(0.025, 0.975), 
    type = "bootstrap"
    )
  
  ## create output df 
  output <- round(data.frame(
    r_pearson = r_pearson$estimate, 
    r_pearson_LL = r_pearson$interval[1],
    r_pearson_UL = r_pearson$interval[2], 
    r_spearman = r_spearman$estimate, 
    r_spearman_LL = r_spearman$interval[1], 
    r_spearman_UL = r_spearman$interval[2]), 
    digits = 2)
  
  cbind(data.frame(data_set = subset_name), output)
  
}
)

## store as df
Table_2 <- do.call(rbind, Table_2)

Table_2

## export table as csv
readr::write_csv(Table_2, file = "Output_Tables/table_2.csv")

## export table as .docx
officer::read_docx() %>%
  flextable::body_add_flextable(
    value = flextable::flextable(data = Table_2)) %>%
  print(target = "Output_Tables/table_2.docx")

```

## Table 3

```{r}

## create list with table data
Table_3 <- lapply(
  subset_names, 
  function(subset_name){
    
    ## select relevant data 
    data <- MA_results[[subset_name]]
  
    ## craete data table 
    output <- tibble::tibble(
      "effect size" = c("MD", "d"), 
      "mean" = c(data$MD$b, 
                 data$d$b), 
      "tau" = c(sqrt(data$MD$tau2), 
                sqrt(data$d$tau2)), 
      "CV" = c(sqrt(data$MD$tau2)/data$MD$b, 
               sqrt(data$d$tau2)/data$d$b), 
      "H2" = c(data$MD$H2, 
               data$d$H2), 
      "I2" = c(data$MD$I2, 
               data$d$I2), 
      "QEp" = c(data$MD$QEp, 
                data$d$QEp), 
      "df" = c(data$MD$k - 1,
               data$d$k - 1)
      )
    
    ## add data_set name and return output 
    cbind(data.frame(data_set = subset_name), output)
    
    }
  )

## bind list objects into a single df
Table_3 <- do.call(rbind, Table_3)

## round numeric variables 
Table_3[,3:6] <- round(Table_3[,3:6], digits = 3)
Table_3[,7] <- round(Table_3[,7], digits = 1)
Table_3[,8] <- remove_zero(unlist(Table_3[,8]))

Table_3

## export table as csv
readr::write_csv(Table_3, file = "Output_Tables/table_3.csv")

## export table as .docx
officer::read_docx() %>%
  flextable::body_add_flextable(
    value = flextable::flextable(data = Table_3)) %>%
  print(target = "Output_Tables/table_3.docx")


```
